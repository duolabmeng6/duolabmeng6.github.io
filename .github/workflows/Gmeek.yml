name: 构建 Gmeek

on:
  workflow_dispatch:
  issues:
    types: [opened, edited]
  schedule:
    - cron: "0 16 * * *"
    
jobs:
  build:
    name: 生成博客
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.owner.id == github.event.sender.id || github.event_name == 'schedule' }}
    permissions: write-all
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: 获取 config.json
        run: |
          echo "====== 检查 config.josn 文件 ======"
          cat config.json
          echo "====== 检查 config.josn 结束 ======"
          sudo apt-get install jq

      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: 克隆源代码
        run: |
          GMEEK_VERSION=$(jq -r ".GMEEK_VERSION" config.json)
          cp -r ./gmeek /opt/Gmeek
          cd /opt/Gmeek/

      - name: 安装依赖
        run: |
          pip install --upgrade pip
          pip install -r /opt/Gmeek/requirements.txt

      - name: 生成新的 HTML
        run: |
          cp -r ./* /opt/Gmeek/
          cd /opt/Gmeek/
          python Gmeek.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} --issue_number '${{ github.event.issue.number }}'
          cp -a /opt/Gmeek/docs ${{ github.workspace }} 
          cp -a /opt/Gmeek/backup ${{ github.workspace }} 
          cp /opt/Gmeek/blogBase.json ${{ github.workspace }} 
          
      - name: 更新 HTML
        run: |
          git config --local user.email "$(jq -r ".email" config.json)"
          git config --local user.name "${{ github.repository_owner }}"
          rm -rf ./docs/*
          git add .
          git commit -a -m '🎉Gmeek 操作自动更新' || echo "没有需要提交的内容"
          git push || echo "没有需要推送的内容"
          sleep 3
          
      - name: 触发 Hugo 工作流程
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type":"trigger-hugo"}'

      # - name: 上传构建产物
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: 'docs/.'
          
  # deploy:
  #   name: 部署博客
  #   runs-on: ubuntu-20.04
  #   needs: build
  #   permissions:
  #     contents: write
  #     pages: write
  #     id-token: write
  #   concurrency:
  #     group: "pages"
  #     cancel-in-progress: false
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - name: 部署到 GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
