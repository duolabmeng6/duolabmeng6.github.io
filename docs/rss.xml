<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>多啦b梦的博客</title><link>https://duolabmeng6.github.io</link><description>记录技术与生活</description><copyright>多啦b梦的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://duolabmeng6.github.io</link></image><lastBuildDate>Fri, 19 Jul 2024 23:00:18 +0000</lastBuildDate><managingEditor>多啦b梦的博客</managingEditor><ttl>60</ttl><webMaster>多啦b梦的博客</webMaster><item><title>streamlit 简单的登录事例</title><link>https://duolabmeng6.github.io/post/streamlit%20-jian-dan-de-deng-lu-shi-li.html</link><description>streamlit 的cookie库挺坑的 这里我重新写了一份能用的 streamlit 登录后保持登录状态的事例&#13;
&#13;
```&#13;
# NOTE: This feature uses browser local storage! AKA it stores data on a viewer's&#13;
# machine. This may have privacy and compliance implications for your app. Be sure&#13;
# to take that into account with any usage.&#13;
&#13;
import json&#13;
from typing import Any&#13;
import uuid&#13;
import streamlit as st&#13;
&#13;
# Requires `pip install streamlit-js`&#13;
# https://github.com/toolittlecakes/streamlit_js&#13;
from streamlit_js import st_js&#13;
&#13;
KEY_PREFIX = 'st_localstorage_'&#13;
&#13;
&#13;
class StLocalStorage:&#13;
    '''An Dict-like wrapper around browser local storage.&#13;
&#13;
    Values are stored JSON encoded.'''&#13;
&#13;
    def __init__(self):&#13;
        # Keep track of a UUID for each key to enable reruns&#13;
        if '_ls_unique_keys' not in st.session_state:&#13;
            st.session_state['_ls_unique_keys'] = {}&#13;
&#13;
        # Hide the JS iframes&#13;
        self._container = st.container()&#13;
        with self._container:&#13;
            st.html(''' &#13;
                &lt;style&gt;&#13;
                    .element-container:has(iframe[height='0']) {&#13;
                        display: none;&#13;
                    }&#13;
                &lt;/style&gt;&#13;
            ''')&#13;
&#13;
    def __getitem__(self, key: str) -&gt; Any:&#13;
        if key not in st.session_state['_ls_unique_keys']:&#13;
            st.session_state['_ls_unique_keys'][key] = str(uuid.uuid4())&#13;
        code = f'''&#13;
        // The UUID changes on save, which causes this to rerun and update&#13;
        console.debug('{st.session_state['_ls_unique_keys'][key]}');&#13;
        return JSON.parse(localStorage.getItem('{KEY_PREFIX + key}'));&#13;
        '''&#13;
        with self._container:&#13;
            result = st_js(code, key=st.session_state['_ls_unique_keys'][key])&#13;
        if result and result[0]:&#13;
            return json.loads(result[0])&#13;
        return None&#13;
&#13;
    def __setitem__(self, key: str, value: Any) -&gt; None:&#13;
        value = json.dumps(value, ensure_ascii=False)&#13;
        st.session_state['_ls_unique_keys'][key] = str(uuid.uuid4())&#13;
        code = f'''&#13;
        console.debug('setting {key} to local storage');&#13;
        localStorage.setItem('{KEY_PREFIX + key}', JSON.stringify('{value}'));&#13;
        '''&#13;
        with self._container:&#13;
            return st_js(code, key=st.session_state['_ls_unique_keys'][key] + '_set')&#13;
&#13;
    def __delitem__(self, key: str) -&gt; None:&#13;
        st.session_state['_ls_unique_keys'][key] = str(uuid.uuid4())&#13;
        code = f'localStorage.removeItem('{KEY_PREFIX + key}');'&#13;
        with self._container:&#13;
            return st_js(code, key=st.session_state['_ls_unique_keys'][key] + '_del')&#13;
&#13;
    def __contains__(self, key: str) -&gt; bool:&#13;
        return self.__getitem__(key) is not None&#13;
&#13;
    def get(self, key: str) -&gt; Any:&#13;
        try:&#13;
            return self.__getitem__(key)&#13;
        except:&#13;
            return None&#13;
&#13;
    def set(self, key: str, value: Any) -&gt; None:&#13;
        try:&#13;
            self.__setitem__(key, value)&#13;
        except:&#13;
            return None&#13;
&#13;
```&#13;
&#13;
```&#13;
import streamlit as st&#13;
import st_local_storage&#13;
st_ls = st_local_storage.StLocalStorage()&#13;
&#13;
login = st_ls.get('login')&#13;
if login:&#13;
    st.markdown(f'### 欢迎回来, **{login}**')&#13;
    if st.button('退出登录'):&#13;
        st_ls['login'] = None&#13;
else:&#13;
    st.markdown('## 用户登录')&#13;
    username = st.text_input('用户名', max_chars=30, placeholder='输入用户名')&#13;
    password = st.text_input('密码', type='password', max_chars=30, placeholder='输入密码')&#13;
    if st.button('登录'):&#13;
        if username == 'admin' and password == 'admin':&#13;
            st_ls.set('login', username)&#13;
            st.success('登录成功！正在跳转...')&#13;
        else:&#13;
            st.error('账号或密码错误')&#13;
&#13;
```&#13;
。</description><guid isPermaLink="true">https://duolabmeng6.github.io/post/streamlit%20-jian-dan-de-deng-lu-shi-li.html</guid><pubDate>Fri, 19 Jul 2024 22:59:56 +0000</pubDate></item><item><title>测试一下</title><link>https://duolabmeng6.github.io/post/ce-shi-yi-xia.html</link><description>看看效果。</description><guid isPermaLink="true">https://duolabmeng6.github.io/post/ce-shi-yi-xia.html</guid><pubDate>Fri, 28 Jun 2024 02:54:47 +0000</pubDate></item></channel></rss>