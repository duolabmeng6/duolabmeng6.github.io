<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>多啦b梦的博客</title><link>https://duolabmeng6.github.io</link><description>记录技术与生活</description><copyright>多啦b梦的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://duolabmeng6.github.io</link></image><lastBuildDate>Sat, 27 Jul 2024 19:50:13 +0000</lastBuildDate><managingEditor>多啦b梦的博客</managingEditor><ttl>60</ttl><webMaster>多啦b梦的博客</webMaster><item><title>让Copilot用上DeepSeek总于搞明白了vscode和JetBrainsIDE都能用</title><link>https://duolabmeng6.github.io/post/rang-Copilot-yong-shang-DeepSeek-zong-yu-gao-ming-bai-le-vscode-he-JetBrainsIDE-du-neng-yong.html</link><description># 前言&#13;
论坛的教程太复杂啦 我给一个最简单的最简洁的&#13;
&#13;
# 1.下载override项目&#13;
[linux-do/override: 啥也不是 (github.com)](https://github.com/linux-do/override)&#13;
&#13;
新建这个文件 config.conf &#13;
```&#13;
{&#13;
  'bind': '0.0.0.0:8181',&#13;
  'proxy_url': '',&#13;
  'timeout': 600,&#13;
  'codex_api_base': 'https://api.deepseek.com/beta/v1',&#13;
  'codex_api_key': 'sk-',&#13;
  'codex_api_organization': '',&#13;
  'codex_api_project': '',&#13;
  'codex_max_tokens': 500,&#13;
  'code_instruct_model': 'deepseek-coder',&#13;
  'chat_api_base': 'https://api.deepseek.com/v1',&#13;
  'chat_api_key': 'sk-',&#13;
  'chat_api_organization': '',&#13;
  'chat_api_project': '',&#13;
  'chat_max_tokens': 4096,&#13;
  'chat_model_default': 'deepseek-chat',&#13;
  'chat_model_map': {&#13;
  },&#13;
  'chat_locale': 'zh_CN',&#13;
  'auth_token': ''&#13;
}&#13;
```&#13;
运行 `docker-compose up -d`&#13;
访问 `http://127.0.0.1:8181` 这个服务就部署成功了&#13;
&#13;
# 2.安装 VSCode Copilot&#13;
Copilot 1.219.0&#13;
Copilotchat 0.17.1&#13;
按 ctrl+shift+p 输入 settings 打开首选项 加入这些配置&#13;
&#13;
```&#13;
  'github.copilot.advanced': {&#13;
    'debug.overrideCAPIUrl': 'http://127.0.0.1:8181/v1',&#13;
    'debug.overrideProxyUrl': 'http://127.0.0.1:8181',&#13;
    'debug.chatOverrideProxyUrl': 'http://127.0.0.1:8181/v1/chat/completions',&#13;
    'authProvider': 'github-enterprise'&#13;
  },&#13;
  'github-enterprise.uri': 'https://cocopilot.org'&#13;
```&#13;
&#13;
保存后重启VSCode&#13;
&#13;
# 3.登录Copilot插件齐活能用了&#13;
&#13;
# 关闭vscode补全的提示声音&#13;
&#13;
如果你觉得声音不烦 这里不用处理了&#13;
&#13;
vscode按 ctrl+shift+p 输入 settings 打开首选项 加入这些配置&#13;
&#13;
```&#13;
    'accessibility.signals.chatRequestSent': {&#13;
        'sound': 'off',&#13;
        'announcement': 'off'&#13;
    },&#13;
    'accessibility.signals.chatResponseReceived': {&#13;
        'sound': 'off'&#13;
    },&#13;
    'accessibility.signals.diffLineDeleted': {&#13;
        'sound': 'off'&#13;
    },&#13;
    'accessibility.signals.clear': {&#13;
        'sound': 'off',&#13;
        'announcement': 'off'&#13;
    },&#13;
    'accessibility.signals.diffLineInserted': {&#13;
        'sound': 'off'&#13;
    },&#13;
```&#13;
&#13;
# JetBrains IDE的配置方法&#13;
&#13;
## 1.下载插件的版本插件版本  1.5.8.5775 [GitHub Copilot Plugin](https://plugins.jetbrains.com/plugin/17718-github-copilot/versions/stable)&#13;
&#13;
## 2.加入这个配置 cocopilot.org&#13;
![image](https://github.com/user-attachments/assets/daa5ff89-9b0b-4fe8-bd61-0fee3935a114)&#13;
Settings -&gt; Languages &amp; Frameworks -&gt; GitHub Copilot -&gt; Authentication Provider: cocopilot.org&#13;
&#13;
## 3.下载这个两个插件 &#13;
&#13;
&#13;
[ja-netfilter](https://gitee.com/ja-netfilter/ja-netfilter)&#13;
[plugin-env: ](https://gitee.com/ja-netfilter/plugin-env/releases)&#13;
![image](https://github.com/user-attachments/assets/ed8117c5-3ef1-4312-9e0c-6abcbe428f47)&#13;
&#13;
`goland.vmoptions`  这里默认你们会了&#13;
```&#13;
-javaagent:/Users/ll/ja-netfilter/ja-netfilter.jar&#13;
```&#13;
&#13;
&#13;
env.conf &#13;
```&#13;
[ENV]&#13;
PREFIX,AGENT_DEBUG_OVERRIDE_CAPI_URL=http://127.0.0.1:8181/v1&#13;
PREFIX,AGENT_DEBUG_OVERRIDE_PROXY_URL=http://127.0.0.1:8181&#13;
PREFIX,GITHUB_COPILOT_OVERRIDE_CAPI_URL=http://127.0.0.1:8181/v1&#13;
PREFIX,GITHUB_COPILOT_OVERRIDE_PROXY_URL=http://127.0.0.1:8181&#13;
```&#13;
## 4. 登录Copilot插件齐活能用了&#13;
&#13;
。</description><guid isPermaLink="true">https://duolabmeng6.github.io/post/rang-Copilot-yong-shang-DeepSeek-zong-yu-gao-ming-bai-le-vscode-he-JetBrainsIDE-du-neng-yong.html</guid><pubDate>Sat, 27 Jul 2024 19:48:14 +0000</pubDate></item><item><title>streamlit 简单的登录事例</title><link>https://duolabmeng6.github.io/post/streamlit%20-jian-dan-de-deng-lu-shi-li.html</link><description>streamlit 的cookie库挺坑的 这里我重新写了一份能用的 streamlit 登录后保持登录状态的事例&#13;
&#13;
`st_local_storage.py`&#13;
```&#13;
# NOTE: This feature uses browser local storage! AKA it stores data on a viewer's&#13;
# machine. This may have privacy and compliance implications for your app. Be sure&#13;
# to take that into account with any usage.&#13;
&#13;
import json&#13;
from typing import Any&#13;
import uuid&#13;
import streamlit as st&#13;
&#13;
# Requires `pip install streamlit-js`&#13;
# https://github.com/toolittlecakes/streamlit_js&#13;
from streamlit_js import st_js&#13;
&#13;
KEY_PREFIX = 'st_localstorage_'&#13;
&#13;
&#13;
class StLocalStorage:&#13;
    '''An Dict-like wrapper around browser local storage.&#13;
&#13;
    Values are stored JSON encoded.'''&#13;
&#13;
    def __init__(self):&#13;
        # Keep track of a UUID for each key to enable reruns&#13;
        if '_ls_unique_keys' not in st.session_state:&#13;
            st.session_state['_ls_unique_keys'] = {}&#13;
&#13;
        # Hide the JS iframes&#13;
        self._container = st.container()&#13;
        with self._container:&#13;
            st.html(''' &#13;
                &lt;style&gt;&#13;
                    .element-container:has(iframe[height='0']) {&#13;
                        display: none;&#13;
                    }&#13;
                &lt;/style&gt;&#13;
            ''')&#13;
&#13;
    def __getitem__(self, key: str) -&gt; Any:&#13;
        if key not in st.session_state['_ls_unique_keys']:&#13;
            st.session_state['_ls_unique_keys'][key] = str(uuid.uuid4())&#13;
        code = f'''&#13;
        // The UUID changes on save, which causes this to rerun and update&#13;
        console.debug('{st.session_state['_ls_unique_keys'][key]}');&#13;
        return JSON.parse(localStorage.getItem('{KEY_PREFIX + key}'));&#13;
        '''&#13;
        with self._container:&#13;
            result = st_js(code, key=st.session_state['_ls_unique_keys'][key])&#13;
        if result and result[0]:&#13;
            return json.loads(result[0])&#13;
        return None&#13;
&#13;
    def __setitem__(self, key: str, value: Any) -&gt; None:&#13;
        value = json.dumps(value, ensure_ascii=False)&#13;
        st.session_state['_ls_unique_keys'][key] = str(uuid.uuid4())&#13;
        code = f'''&#13;
        console.debug('setting {key} to local storage');&#13;
        localStorage.setItem('{KEY_PREFIX + key}', JSON.stringify('{value}'));&#13;
        '''&#13;
        with self._container:&#13;
            return st_js(code, key=st.session_state['_ls_unique_keys'][key] + '_set')&#13;
&#13;
    def __delitem__(self, key: str) -&gt; None:&#13;
        st.session_state['_ls_unique_keys'][key] = str(uuid.uuid4())&#13;
        code = f'localStorage.removeItem('{KEY_PREFIX + key}');'&#13;
        with self._container:&#13;
            return st_js(code, key=st.session_state['_ls_unique_keys'][key] + '_del')&#13;
&#13;
    def __contains__(self, key: str) -&gt; bool:&#13;
        return self.__getitem__(key) is not None&#13;
&#13;
    def get(self, key: str) -&gt; Any:&#13;
        try:&#13;
            return self.__getitem__(key)&#13;
        except:&#13;
            return None&#13;
&#13;
    def set(self, key: str, value: Any) -&gt; None:&#13;
        try:&#13;
            self.__setitem__(key, value)&#13;
        except:&#13;
            return None&#13;
&#13;
```&#13;
&#13;
`login.py`&#13;
```&#13;
import streamlit as st&#13;
import st_local_storage&#13;
st_ls = st_local_storage.StLocalStorage()&#13;
&#13;
login = st_ls.get('login')&#13;
if login:&#13;
    st.markdown(f'### 欢迎回来, **{login}**')&#13;
    if st.button('退出登录'):&#13;
        st_ls['login'] = None&#13;
else:&#13;
    st.markdown('## 用户登录')&#13;
    username = st.text_input('用户名', max_chars=30, placeholder='输入用户名')&#13;
    password = st.text_input('密码', type='password', max_chars=30, placeholder='输入密码')&#13;
    if st.button('登录'):&#13;
        if username == 'admin' and password == 'admin':&#13;
            st_ls.set('login', username)&#13;
            st.success('登录成功！正在跳转...')&#13;
        else:&#13;
            st.error('账号或密码错误')&#13;
&#13;
```&#13;
&#13;
运行&#13;
```&#13;
streamlit run login.py&#13;
```。</description><guid isPermaLink="true">https://duolabmeng6.github.io/post/streamlit%20-jian-dan-de-deng-lu-shi-li.html</guid><pubDate>Fri, 19 Jul 2024 22:59:56 +0000</pubDate></item><item><title>测试一下</title><link>https://duolabmeng6.github.io/post/ce-shi-yi-xia.html</link><description>看看效果。</description><guid isPermaLink="true">https://duolabmeng6.github.io/post/ce-shi-yi-xia.html</guid><pubDate>Fri, 28 Jun 2024 02:54:47 +0000</pubDate></item></channel></rss>